---
- name: Test with generated self-signed certmonger certificate
  hosts: all
  vars:
    __test_cert_name: /etc/cockpit/ws-certs.d/monger-cockpit
    __test_cert_files:
      - "{{ __test_cert_name }}.crt"
    __test_key_files:
      - "{{ __test_cert_name }}.key"
  tasks:
    - name: Tests
      block:
        - name: Set up for certificate tests
          include_tasks: tasks/setup_for_certificate_tests.yml

        - name: Check if cockpit is new enough (at least 211) to support certmonger
          when: __cockpit_version | int >= 211
          block:
            # has to be done dynamically, as the first step checks it out
            - name: Generate certificate with certificate system role
              include_role:
                name: fedora.linux_system_roles.certificate
              vars:
                certificate_requests:
                  - name: "{{ __test_cert_name }}"
                    dns: ['localhost', 'www.example.com']
                    ca: self-sign
                    group: "{{ __cockpit_test_group
                      if __cockpit_test_group else omit }}"

            # ostree cannot remove packages and cannot cleanup properly
            # this works around that issue
            - name: Restart cockpit to use the new certificates
              service:
                name: "{{ __cockpit_daemon }}"
                state: restarted
              when: __cockpit_is_ostree | d(false)

            #
            # Validate installation
            #

            - name: Test - cockpit works with TLS and expected certificate
              # noqa command-instead-of-module
              command:
                cmd: >
                  curl --cacert {{ __test_cert_name }}.crt
                  https://localhost:9090
                # ansible 2.11's uri module has ca_path,
                # but that's still too new for us
              changed_when: false

            - name: Test - get certmonger tracking status
              command: >
                getcert list  --tracking-only
                -f {{ __test_cert_name }}.crt
              register: result
              changed_when: false

            - name: Test - ensure certificate generation succeeded
              assert:
                that: "'status: MONITORING' in result.stdout"

      always:
        - name: Test - generic cleanup
          include_tasks: tasks/cleanup.yml
