---
- name: Test the cockpit role calling the certificate role internally
  hosts: all
  vars:
    __test_cert_name: cockpit_cert
    __test_cert_files:
      - /etc/cockpit/ws-certs.d/{{ __test_cert_name }}.crt
      - /etc/pki/tls/certs/certs/{{ __test_cert_name }}.crt
    __test_key_files:
      - /etc/cockpit/ws-certs.d/{{ __test_cert_name }}.key
      - /etc/pki/tls/certs/private/{{ __test_cert_name }}.key
  tasks:
    - name: Tests
      block:
        - name: >-
            Install cockpit using the certificate role to create a certificate
          block:
            - name: Set up for certificate tests
              include_tasks: tasks/setup_for_certificate_tests.yml

            - name: Install cockpit with cockpit_certificates request
              vars:
                cockpit_packages: minimal
                cockpit_certificates:
                  - name: "{{ __test_cert_name }}"
                    dns: ['localhost', 'www.example.com']
                    ca: self-sign
                    group: "{{ __cockpit_test_group
                      if  __cockpit_test_group else omit }}"
              include_role:
                name: linux-system-roles.cockpit
                public: true

            - name: See if cert file exists
              stat:
                path: /etc/pki/tls/certs/{{ __test_cert_name }}.crt
              register: __cockpit_other_certificate

          rescue:
            - name: Check the error message
              vars:
                expected: >-
                  Creating a self-signed certificate is not supported on
                  {{ ansible_facts['distribution'] }}-{{
                     ansible_facts['distribution_version'] }}
              assert:
                that: ansible_failed_result.msg == expected
              when:
                - ansible_facts['os_family'] == 'RedHat'
                - ansible_facts['distribution_version'] | int == 7

        - name: >-
            Verify self-signed certmonger certificate created by the
            certificate role
          when:
            - ansible_facts['os_family'] == 'RedHat'
            - ansible_facts['distribution_version'] | int > 7
          block:
            - name: Collect installed package versions
              package_facts:

            # ostree cannot remove packages and cannot cleanup properly
            # this works around that issue
            - name: Restart cockpit to use the new certificates
              service:
                name: "{{ __cockpit_daemon }}"
                state: restarted
              when: __cockpit_is_ostree | d(false)

            # Validate installation
            - name: Test - cockpit works with TLS and expected certificate
              # noqa command-instead-of-module
              command:
                cmd: >
                  curl --cacert "/etc/pki/tls/certs/{{ __test_cert_name }}.crt"
                  https://localhost:9090
                # ansible 2.11's uri module has ca_path,
                # but that's still too new for us
              changed_when: false

            - name: Test - get certmonger tracking status
              command: >
                getcert list  --tracking-only
                -f "/etc/pki/tls/certs/{{ __test_cert_name }}.crt"
              register: result
              changed_when: false

            - name: Test - ensure certificate generation succeeded
              assert:
                that: "'status: MONITORING' in result.stdout"

      always:
        - name: Test - generic cleanup
          include_tasks: tasks/cleanup.yml
