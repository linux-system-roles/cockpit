---
# This approach relies on https://github.com/linux-system-roles/certificate/pull/97 and cockpit â‰¥ 211,
# so it does not work on RHEL/CentOS 7. tests_certificate_runafter.yml covers an approach which
# works everywhere, but has to use a `runafter` script.
- name: test - local setup
  hosts: 127.0.0.1
  gather_facts: false
  tasks:
    - name: Download current linux-system-roles.certificate
      git:
        repo: https://github.com/linux-system-roles/certificate/
        dest: roles/linux-system-roles.certificate
        version: master
        depth: 1
      become: false
      # skip this for RHEL downstream tests, which define $BEAKERLIB
      when:
        - lookup('env', 'BEAKERLIB') | length == 0
        - not 'roles/linux-system-roles.certificate' is exists

- name: Install cockpit
  hosts: all
  vars:
    cockpit_packages: minimal
  roles:
    - linux-system-roles.cockpit

# self-signed is broken (https://github.com/linux-system-roles/certificate/issues/98),
# and has too restrictive keyUsage so that using the certificate as CA is not allowed
# (https://github.com/linux-system-roles/certificate/issues/99), thus use "local"
- name: Generate local certmonger certificate
  hosts: all
  tasks:
    - name: Collect installed package versions
      package_facts:

    - name: Check if cockpit is new enough (at least 211) to support certmonger
      when: ansible_facts.packages['cockpit-ws'][0].version | int >= 211
      block:
        # Fixed in cockpit 255 (https://github.com/cockpit-project/cockpit/commit/6ec4881856e)
        - name: Allow certmonger to write into Cockpit's certificate directory
          file:
            path: /etc/cockpit/ws-certs.d/
            state: directory
            setype: cert_t

        # has to be done dynamically, as the first step checks it out
        - name: Generate certificate with linux-system-roles.certificate
          include_role:
            name: linux-system-roles.certificate
          vars:
            certificate_requests:
              - name: /etc/cockpit/ws-certs.d/monger-cockpit
                dns: ['localhost', 'www.example.com']
                ca: local
                group: cockpit-ws

        #
        # Validate installation
        #

        # ugh, is there really no better way to do that?
        - name: Get PEM of certmonger's local CA
          command:
            cmd: >
              openssl pkcs12 -in /var/lib/certmonger/local/creds -out /var/lib/certmonger/local/ca.pem
              -nokeys -nodes -passin pass:""
            creates: /var/lib/certmonger/local/ca.pem

        - name: test - cockpit works with TLS and expected certificate
          command:
            cmd: curl --cacert /var/lib/certmonger/local/ca.pem https://localhost:9090
            # ansible 2.11's uri module has ca_path, but that's still too new for us
            warn: false
          changed_when: false

        - name: test - get certmonger tracking status
          command: getcert list  --tracking-only -f /etc/cockpit/ws-certs.d/monger-cockpit.crt
          register: result
          changed_when: false

        - name: test - ensure certificate generation succeeded
          assert:
            that: "'status: MONITORING' in result.stdout"

        - name: test - clean up tracked certificate
          command: getcert stop-tracking -f /etc/cockpit/ws-certs.d/monger-cockpit.crt
          changed_when: false

        - name: test - clean up generated certificate
          file:
            path: /etc/cockpit/ws-certs.d/monger-cockpit.crt
            state: absent

        - name: test - clean up generated private key
          file:
            path: /etc/cockpit/ws-certs.d/monger-cockpit.key
            state: absent

    - name: test - generic cleanup
      include_tasks: tasks/cleanup.yml
